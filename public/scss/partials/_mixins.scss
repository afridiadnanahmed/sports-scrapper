//Mixins
@mixin clearfix() {
    &:before,
    &:after {
        content: "";
        display: table;
    }
    &:after {
        clear: both;
    }
}
@mixin box-sizing($box-model) {
  -webkit-box-sizing: $box-model; // Safari <= 5
     -moz-box-sizing: $box-model; // Firefox <= 19
          box-sizing: $box-model;
}
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  border-radius: $radius;
  background-clip: padding-box;  /* stops bg color from leaking outside the border: */
}
@mixin anim($all, $one, $lin) {
  -webkit-tranistion: $all $one $lin;
  -moz-transition: $all $one $lin;
  -o-transition: $all $one $lin;
  transition: $all $one $lin;
}
.transitions{
  transition:all 100ms linear;
  -webkit-transition:all 100ms linear;
  -moz-transition:all 100ms linear;
  -o-transition:all 100ms linear;
}
.box-shadow-none{
  box-shadow:none;
  -webkit-box-shadow:none;
  -moz-box-shadow:none;
  -o-box-shadow:none;
}
@mixin box-shadow($radius) {
  -webkit-box-shadow: $radius;
     -moz-box-shadow: $radius;
      -ms-box-shadow: $radius;
          box-shadow: $radius;
}
//Responsive media quries
$tablet: "(max-width: 1024px)";
$above-laptop: "(min-width: 1200px)";
$above-tablet: "(min-width: 1100px)";
$mobile: "(max-width: 767px)";
$above-mobile: "(min-width: 767px)";
$mobile-mini: "(max-width: 580px)";
$max-1002: "(max-width: 1002px)";
$below-laptop : "(max-width: 1200px)";
//Gradient
// @include gradient(gradient--concat($gradient--concat));
@mixin gradient($gradient-degrees, $gradient--concat) {
    $ie_variables: gradient--ie($gradient--concat);
    $start-color: map-get($ie_variables, 'start');
    $finish-color: map-get($ie_variables, 'finish');

  background-color: mix($start-color, $finish-color); /* Fallback */
  background-image: -webkit-gradient(linear, 0% 0%, 0% 100%, from($start-color), to($finish-color));
  background-image: -webkit-linear-gradient($gradient-degrees, gradient--concat($gradient--concat)); 
  background-image:    -moz-linear-gradient($gradient-degrees, gradient--concat($gradient--concat));
  background-image:     -ms-linear-gradient($gradient-degrees, gradient--concat($gradient--concat));
  background-image:      -o-linear-gradient($gradient-degrees, gradient--concat($gradient--concat));
  -ms-filter: "progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$start-color}', EndColorStr='#{$finish-color}')";
}


// Concat :: Gradient Mixin
// Concatinate the gradient map properties and values into structured CSS
@function gradient--concat($gradient--concat){
    $return-new: '';

    @each $position, $color in $gradient--concat {
       $return: $color + ' ' $position + gradient--position($position);
       $return-new: $return-new + '' + $return;
    }

    @return unquote($return-new);
}

// Position :: Gradient Mixin
// Add commas to the end of every property concationation, except the last one. 
@function gradient--position($position){
    @if ( $position != 100%) {
        @return ",";
    }
    @else {
        @return "";
    }
}

// Internet Explore Fallback
// Extract the first and last color variables for "-ms-filter"
@function gradient--ie($gradient--concat){
    $start_map: '';
    $end_map: '';

    @each $position, $color in $gradient--concat {
        @if ( $position == 0%) {
            $start_map: (
                'start': $color
                )
        }
        @if ( $position == 100%) {
            $end_map: (
                'finish': $color
                )
        }   
    }

    @return map-merge($start_map, $end_map)

}
.vertical-center{
  top: 50%;
  transform: translateY(-50%);
  -webkit-transform: translateY(-50%);
  -moz-transform: translateY(-50%);
  -o-transform: translateY(-50%);
  transform: translateY(-50%);
}
.all-center{
  top: 50%;
  left: 50%;
  transform: translate(-50%);
  -webkit-transform: translate(-50%, -50%);
  -moz-transform: translate(-50%, -50%);
  -o-transform: translate(-50%, -50%);
  transform: translate(-50%, -50%);
}